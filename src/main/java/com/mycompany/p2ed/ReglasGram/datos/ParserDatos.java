
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.p2ed.ReglasGram.datos;

import com.mycompany.p2ed.ReglasGram.Token;
import java_cup.runtime.*;
import com.mycompany.p2ed.ReglasGram.datos.symDatos.*;
import java.util.ArrayList;
import java.util.List;
import com.mycompany.p2ed.objetos.*;
import com.mycompany.p2ed.listas.*;
import com.mycompany.p2ed.hash.*;
import com.mycompany.p2ed.Tree.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserDatos extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symDatos.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserDatos() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserDatos(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDatos(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\005\000" +
    "\002\011\005\000\002\012\003\000\002\012\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\007\000\002\014" +
    "\003\000\002\015\005\000\002\024\005\000\002\025\011" +
    "\000\002\025\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\016\005\000\002\027\005\000\002" +
    "\030\007\000\002\030\003\000\002\017\005\000\002\031" +
    "\005\000\002\032\003\000\002\020\005\000\002\033\005" +
    "\000\002\034\007\000\002\034\003\000\002\021\005\000" +
    "\002\035\005\000\002\036\011\000\002\036\003\000\002" +
    "\022\005\000\002\037\005\000\002\040\017\000\002\040" +
    "\003\000\002\023\005\000\002\041\005\000\002\042\011" +
    "\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\024\003\021\004\023\005\022\006\024\007" +
    "\017\010\005\011\026\012\007\013\011\001\002\000\026" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\001\002\000\006\003\031" +
    "\017\027\001\002\000\026\002\ufffe\003\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\001\002\000\006\003\031\017\027\001\002\000\026\002" +
    "\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\001\002\000\006\003\031\017" +
    "\027\001\002\000\026\002\ufff7\003\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\001" +
    "\002\000\026\002\133\003\021\004\023\005\022\006\024" +
    "\007\017\010\005\011\026\012\007\013\011\001\002\000" +
    "\026\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\001\002\000\026\002" +
    "\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\001\002\000\026\002\ufff8\003" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\001\002\000\006\003\031\017\027\001" +
    "\002\000\026\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\001\002\000" +
    "\026\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\001\002\000\006\003" +
    "\031\017\027\001\002\000\006\003\031\017\027\001\002" +
    "\000\006\003\031\017\027\001\002\000\026\002\uffff\003" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\uffff\013\uffff\001\002\000\006\003\031\017\027\001" +
    "\002\000\012\003\uffea\015\uffea\016\uffea\021\uffea\001\002" +
    "\000\006\003\055\023\056\001\002\000\012\003\uffe9\015" +
    "\uffe9\016\uffe9\021\uffe9\001\002\000\006\003\034\021\033" +
    "\001\002\000\004\022\041\001\002\000\006\003\uffcf\020" +
    "\uffcf\001\002\000\006\003\036\020\037\001\002\000\006" +
    "\003\uffe7\023\uffe7\001\002\000\006\003\uffe8\023\uffe8\001" +
    "\002\000\006\003\uffd1\023\uffd1\001\002\000\010\003\043" +
    "\015\042\016\045\001\002\000\010\003\ufff5\020\ufff5\022" +
    "\ufff5\001\002\000\010\003\ufff3\020\ufff3\022\ufff3\001\002" +
    "\000\004\022\046\001\002\000\010\003\ufff4\020\ufff4\022" +
    "\ufff4\001\002\000\006\003\051\021\047\001\002\000\010" +
    "\003\ufff0\020\ufff0\022\ufff0\001\002\000\004\022\052\001" +
    "\002\000\010\003\uffef\020\uffef\022\uffef\001\002\000\006" +
    "\003\051\021\047\001\002\000\006\003\uffd0\020\uffd0\001" +
    "\002\000\026\002\uffd2\003\uffd2\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\001\002\000" +
    "\026\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\001\002\000\026\002" +
    "\uffee\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\013\uffee\001\002\000\006\003\064\021" +
    "\062\001\002\000\006\003\055\023\056\001\002\000\026" +
    "\002\uffdd\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\001\002\000\004\022\066" +
    "\001\002\000\006\003\036\020\037\001\002\000\006\003" +
    "\uffda\020\uffda\001\002\000\006\003\uffdc\023\uffdc\001\002" +
    "\000\010\003\043\015\042\016\045\001\002\000\004\022" +
    "\070\001\002\000\010\003\043\015\042\016\045\001\002" +
    "\000\006\003\uffdb\020\uffdb\001\002\000\006\003\076\021" +
    "\075\001\002\000\006\003\055\023\056\001\002\000\026" +
    "\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\001\002\000\004\022\101" +
    "\001\002\000\006\003\uffe5\020\uffe5\001\002\000\006\003" +
    "\036\020\037\001\002\000\006\003\uffeb\023\uffeb\001\002" +
    "\000\010\003\043\015\042\016\045\001\002\000\004\022" +
    "\103\001\002\000\010\003\043\015\042\016\045\001\002" +
    "\000\006\003\uffe6\020\uffe6\001\002\000\006\003\111\021" +
    "\110\001\002\000\006\003\055\023\056\001\002\000\026" +
    "\002\uffe4\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\001\002\000\004\022\114" +
    "\001\002\000\006\003\uffe1\020\uffe1\001\002\000\006\003" +
    "\036\020\037\001\002\000\006\003\uffe3\023\uffe3\001\002" +
    "\000\010\003\043\015\042\016\045\001\002\000\004\022" +
    "\116\001\002\000\010\003\043\015\042\016\045\001\002" +
    "\000\004\022\120\001\002\000\010\003\122\004\123\014" +
    "\121\001\002\000\006\003\uffe0\020\uffe0\001\002\000\006" +
    "\003\uffde\020\uffde\001\002\000\006\003\uffdf\020\uffdf\001" +
    "\002\000\006\003\uffe2\020\uffe2\001\002\000\006\003\055" +
    "\023\056\001\002\000\010\003\043\015\042\016\045\001" +
    "\002\000\006\003\uffd7\020\uffd7\001\002\000\006\003\036" +
    "\020\037\001\002\000\006\003\uffd8\023\uffd8\001\002\000" +
    "\026\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\013\uffd9\001\002\000\004\002" +
    "\001\001\002\000\026\002\000\003\000\004\000\005\000" +
    "\006\000\007\000\010\000\011\000\012\000\013\000\001" +
    "\002\000\006\003\141\021\140\001\002\000\006\003\055" +
    "\023\056\001\002\000\026\002\uffca\003\uffca\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\001\002\000\004\022\144\001\002\000\006\003\uffc7\020" +
    "\uffc7\001\002\000\006\003\036\020\037\001\002\000\006" +
    "\003\uffc9\023\uffc9\001\002\000\006\003\051\021\047\001" +
    "\002\000\004\022\146\001\002\000\006\003\051\021\047" +
    "\001\002\000\004\022\150\001\002\000\006\003\051\021" +
    "\047\001\002\000\006\003\uffc8\020\uffc8\001\002\000\006" +
    "\003\055\023\056\001\002\000\006\003\156\021\154\001" +
    "\002\000\004\022\160\001\002\000\006\003\036\020\037" +
    "\001\002\000\006\003\uffcb\020\uffcb\001\002\000\006\003" +
    "\uffcd\023\uffcd\001\002\000\010\003\043\015\042\016\045" +
    "\001\002\000\004\022\162\001\002\000\010\003\043\015" +
    "\042\016\045\001\002\000\004\022\164\001\002\000\006" +
    "\003\051\021\047\001\002\000\004\022\166\001\002\000" +
    "\006\003\051\021\047\001\002\000\004\022\170\001\002" +
    "\000\010\003\043\015\042\016\045\001\002\000\004\022" +
    "\172\001\002\000\006\003\051\021\047\001\002\000\006" +
    "\003\uffcc\020\uffcc\001\002\000\026\002\uffce\003\uffce\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\001\002\000\010\003\202\015\201\016\204\001" +
    "\002\000\006\003\055\023\056\001\002\000\026\002\uffd6" +
    "\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\001\002\000\006\003\036\020\037" +
    "\001\002\000\004\022\ufff2\001\002\000\006\003\uffd3\020" +
    "\uffd3\001\002\000\004\022\205\001\002\000\004\022\ufff1" +
    "\001\002\000\006\003\051\021\047\001\002\000\004\022" +
    "\207\001\002\000\006\003\051\021\047\001\002\000\006" +
    "\003\uffd4\020\uffd4\001\002\000\006\003\uffd5\023\uffd5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\026\002\012\003\024\010\005\015\017\016" +
    "\003\017\013\020\014\021\007\022\015\023\011\001\001" +
    "\000\002\001\001\000\006\012\174\033\175\001\001\000" +
    "\002\001\001\000\006\012\152\037\151\001\001\000\002" +
    "\001\001\000\006\012\134\041\135\001\001\000\002\001" +
    "\001\000\024\003\133\010\005\015\017\016\003\017\013" +
    "\020\014\021\007\022\015\023\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\125" +
    "\031\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\104\024\105\001\001\000\006\011\072\012\071" +
    "\001\001\000\006\012\056\027\057\001\001\000\002\001" +
    "\001\000\006\012\031\035\027\001\001\000\002\001\001" +
    "\000\004\007\053\001\001\000\002\001\001\000\004\036" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\062\001\001\000\004\007\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\066\001" +
    "\001\000\002\001\001\000\004\004\070\001\001\000\002" +
    "\001\001\000\004\014\076\001\001\000\004\007\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\077\001\001\000\002\001\001\000\004\004" +
    "\101\001\001\000\002\001\001\000\004\004\103\001\001" +
    "\000\002\001\001\000\004\025\111\001\001\000\004\007" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\112\001\001\000\002\001\001\000" +
    "\004\004\114\001\001\000\002\001\001\000\004\004\116" +
    "\001\001\000\002\001\001\000\004\026\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\131\001\001\000\006\004\126\032" +
    "\127\001\001\000\002\001\001\000\004\013\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\141\001\001\000\004\007\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\142\001\001\000\002\001\001\000\004" +
    "\006\144\001\001\000\002\001\001\000\004\006\146\001" +
    "\001\000\002\001\001\000\004\006\150\001\001\000\002" +
    "\001\001\000\004\007\173\001\001\000\004\040\154\001" +
    "\001\000\002\001\001\000\004\013\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\160\001\001\000" +
    "\002\001\001\000\004\004\162\001\001\000\002\001\001" +
    "\000\004\006\164\001\001\000\002\001\001\000\004\006" +
    "\166\001\001\000\002\001\001\000\004\004\170\001\001" +
    "\000\002\001\001\000\004\006\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\202\034\177\001\001" +
    "\000\004\007\176\001\001\000\002\001\001\000\004\013" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\205\001\001\000" +
    "\002\001\001\000\004\006\207\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDatos$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDatos$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDatos$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	private List<String> listaErrores;
	//listas de los objetos
	private ListCircularDoble<Usuario> listUsuarios = new ListCircularDoble<>();
	private ListCircularDoble<Edificio> listEdificios = new ListCircularDoble<>();
	private ListCircularDoble<Curso> listCurso = new ListCircularDoble<Curso>();
	private ListSimple <Salon> listSalones = new ListSimple<>();
	private Hash<Estudiante> listEstudiantes = new Hash<>();
	private AVL<Catedratico> listCadedraticos = new AVL<>();
	private TreeB<Horario> listHorario = new TreeB<>(5);
	private ListDoble<Asignar> listAsignacion = new ListDoble<>();

	/*
		lista Circular doblemente enlazada: usuarios, edificios, cursos
		lista simple: salones
		hash: estudiante
		AVL: catedraticos
		tree B: horario
		lista doblemente enlazada: asignar
	*/

	public ParserDatos(LexerDatos lex){
		super(lex);
		listaErrores = new ArrayList<String>();
	}
	public void syntax_error(Symbol cur_token){
			String nombreSimbolo = symbl_name_from_id(cur_token.sym);
            Token token = (Token) cur_token.value;
            addError(token,"No se esperaba");			
	}

	public void report_fatal_error(String message, Object info){
			String Elerror = "Error Irrecuperable: " + message + " -> {objeto: " + info + "}";
			listaErrores.add(Elerror);	
	}

	private void addError(Token token, String description){
		String msgError =  "Error: ( "+ token.getLexema() +" ) -> {Linea: "+token.getLinea()+", Columna: "+ token.getColumna() +" }," ;
		msgError += description;
		listaErrores.add(msgError);
	}


	protected int error_sync_size(){
		return 1;
	}

	public ListCircularDoble getUsuarios(){
		return listUsuarios;
	}
	public ListCircularDoble getCursos(){
		return listCurso;
	}
	public ListCircularDoble getEdificios(){
		return listEdificios;
	}
	public ListSimple getSalones(){
		return listSalones;
	}
	public Hash getEstudiantes(){
		return listEstudiantes;
	}
	public AVL getCatedraticos(){
		return listCadedraticos;
	}
	public TreeB getHorario(){
		return listHorario;
	}
	public ListDoble getAsignaciones(){
		return listAsignacion;
	}
	public List getListErrores(){
		return listaErrores;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserDatos$actions {
  private final ParserDatos parser;

  /** Constructor */
  CUP$ParserDatos$actions(ParserDatos parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserDatos$do_action_part00000000(
    int                        CUP$ParserDatos$act_num,
    java_cup.runtime.lr_parser CUP$ParserDatos$parser,
    java.util.Stack            CUP$ParserDatos$stack,
    int                        CUP$ParserDatos$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDatos$result;

      /* select the action based on the action number */
      switch (CUP$ParserDatos$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).right;
		Token start_val = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)).value;
		RESULT = start_val;
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDatos$parser.done_parsing();
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inicio tipo_entrada 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= tipo_entrada 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipo_entrada ::= estudiante 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_entrada",1, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipo_entrada ::= usuario 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_entrada",1, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipo_entrada ::= catedratico 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_entrada",1, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipo_entrada ::= edificio 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_entrada",1, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_entrada ::= salon 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_entrada",1, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo_entrada ::= curso 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_entrada",1, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_entrada ::= horario 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_entrada",1, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_entrada ::= asginar 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_entrada",1, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_entrada ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_entrada",1, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipos_string ::= STRING 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		RESULT = e;
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipos_string",2, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipos_string ::= CADENA 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		RESULT = e;
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipos_string",2, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipos_string ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipos_string",2, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipos_string_ws_error ::= STRING 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		RESULT = e;
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipos_string_ws_error",3, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipos_string_ws_error ::= CADENA 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		RESULT = e;
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipos_string_ws_error",3, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numero ::= NUMERO 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		RESULT = e;
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("numero",4, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numero ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("numero",4, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fin_instrucion ::= SEMI 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("fin_instrucion",5, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fin_instrucion ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("fin_instrucion",5, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // estudiante ::= ESTUDIANTE parametros_estudiante fin_instrucion 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("estudiante",6, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros_estudiante ::= apertura_param cont_estudiante cerradura_param 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("parametros_estudiante",7, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // apertura_param ::= PAI 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("apertura_param",8, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // apertura_param ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("apertura_param",8, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cerradura_param ::= PAD 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cerradura_param",9, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cerradura_param ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cerradura_param",9, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cont_estudiante ::= NUMERO COMA tipos_string COMA tipos_string 
            {
              Token RESULT =null;
		int carnetleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).left;
		int carnetright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).right;
		Token carnet = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).value;
		int direccionleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int direccionright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token direccion = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
							int Carnet = Integer.parseInt(carnet.getLexema());
							String Nombre = nombre.getLexema();
							String Direccion = direccion.getLexema();
							Estudiante estud = listEstudiantes.get(Carnet);
							if(estud == null){
								estud = new Estudiante(Carnet,Nombre,Direccion);
								listEstudiantes.push(Carnet,estud);
							}else{
								addError(carnet,"El id esta repetido");
							}
						
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_estudiante",10, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cont_estudiante ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_estudiante",10, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // usuario ::= USUARIO parametros_user fin_instrucion 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("usuario",11, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_user ::= apertura_param cont_user cerradura_param 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("parametros_user",18, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cont_user ::= NUMERO COMA tipos_string COMA tipos_string COMA tipo_usr 
            {
              Token RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).value;
		int passwordleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).left;
		int passwordright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).right;
		Token password = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token tipo = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
						int ID = Integer.valueOf(id.getLexema());
						String Nombre = nombre.getLexema();
						String pass = password.getLexema();
						String Tipo = tipo.getLexema();
						Usuario user = new Usuario(ID,Nombre,pass,Tipo);
						if(Tipo.equalsIgnoreCase("estudiante")){
							Estudiante estud = listEstudiantes.get(ID);
							if(estud ==  null){
								addError(id," No exite el estudiante con el carnet: " + id.getLexema());
							}else{
								user.setEstudiante(estud);
								listUsuarios.push(id.getLexema(),user);
							}
						}else{
							listUsuarios.push(id.getLexema(),user);
						}

							
					
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_user",19, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cont_user ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_user",19, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_usr ::= COLABORADOR 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		RESULT = e;
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_usr",20, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_usr ::= ESTUDIANTE 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		RESULT = e;
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_usr",20, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_usr ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("tipo_usr",20, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // catedratico ::= CATEDRATICO parametros_catedratico fin_instrucion 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("catedratico",12, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros_catedratico ::= apertura_param cont_catedratico cerradura_param 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("parametros_catedratico",21, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cont_catedratico ::= NUMERO COMA tipos_string COMA tipos_string 
            {
              Token RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).value;
		int direccionleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int direccionright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token direccion = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
								int id = Integer.parseInt(identificador.getLexema());
								String Nombre = nombre.getLexema();
								String Direccion = direccion.getLexema();
								Catedratico cat = listCadedraticos.get(String.valueOf(id));
								if (cat == null){
									cat = new Catedratico(id,Nombre,Direccion);
									listCadedraticos.add(String.valueOf(id),cat);
								}else{
									addError(identificador,"El id esta repetido");
								}
							
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_catedratico",22, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cont_catedratico ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_catedratico",22, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // edificio ::= EDIFICIO parametros_edificio fin_instrucion 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("edificio",13, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros_edificio ::= apertura_param cont_edificio cerradura_param 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("parametros_edificio",23, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cont_edificio ::= tipos_string 
            {
              Token RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
							Edificio edificio =  listEdificios.get(nombre.getLexema());
							if (edificio == null){
								edificio = new Edificio(nombre.getLexema());
								listEdificios.push(nombre.getLexema(),edificio);
							}else{
								addError(nombre,"El nombre del edificio esta repetido");
							}
						
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_edificio",24, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // salon ::= SALON parametro_salon fin_instrucion 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("salon",14, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametro_salon ::= apertura_param cont_salon cerradura_param 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("parametro_salon",25, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cont_salon ::= tipos_string_ws_error COMA numero COMA numero 
            {
              Token RESULT =null;
		int nombreSalonleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).left;
		int nombreSalonright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).right;
		Token nombreSalon = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).right;
		Token number = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).value;
		int capacidadleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int capacidadright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token capacidad = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
						String nombreEdificio =  nombreSalon.getLexema();
						int Numero = Integer.parseInt(number.getLexema());
						int Capacidad = Integer.parseInt(capacidad.getLexema());
						Edificio edi = listEdificios.get(nombreEdificio);
						if(edi == null){
							addError(nombreSalon,"El Edifcion ingresado no existe");
						} else{
							Salon salon = new Salon(edi,Numero,Capacidad);
							boolean bol = edi.getSalones().push(Numero,salon);
							//boolean bol = listSalones.push(Numero,salon);
							if(bol==false){
								addError(number,"Ya exite un salon con ese numero");
							}
						}
					
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_salon",26, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cont_salon ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_salon",26, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // curso ::= CURSO parametros_curso fin_instrucion 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("curso",15, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_curso ::= apertura_param cont_curso cerradura_param 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("parametros_curso",27, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cont_curso ::= NUMERO COMA tipos_string COMA numero COMA numero 
            {
              Token RESULT =null;
		int codigoleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).left;
		int codigoright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).right;
		Token codigo = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).value;
		int semestreleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).left;
		int semestreright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).right;
		Token semestre = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).value;
		int creditosleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int creditosright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token creditos = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
						int Codigo = Integer.valueOf(codigo.getLexema());
						String Nombre = nombre.getLexema();
						int Semestre = Integer.valueOf(semestre.getLexema());
						int Creditos = Integer.valueOf(creditos.getLexema());
						Curso curso = listCurso.get(codigo.getLexema());
						if (curso == null) {	
							curso = new Curso(Codigo,Nombre,Semestre,Creditos);
							listCurso.push(codigo.getLexema(),curso);
						}else{
							addError(codigo,"El id ya exite");
						}
					
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_curso",28, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cont_curso ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_curso",28, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // horario ::= HORARIO parametros_horario fin_instrucion 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("horario",16, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros_horario ::= apertura_param cont_horario cerradura_param 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("parametros_horario",29, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cont_horario ::= NUMERO COMA tipos_string COMA tipos_string COMA numero COMA numero COMA tipos_string COMA numero 
            {
              Token RESULT =null;
		int codigoleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-12)).left;
		int codigoright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-12)).right;
		Token codigo = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-12)).value;
		int periodoleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-10)).left;
		int periodoright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-10)).right;
		Token periodo = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-10)).value;
		int dialeft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-8)).left;
		int diaright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-8)).right;
		Token dia = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-8)).value;
		int codCursoleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).left;
		int codCursoright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).right;
		Token codCurso = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).value;
		int codSalonleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).left;
		int codSalonright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).right;
		Token codSalon = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).value;
		int codEdificioleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).left;
		int codEdificioright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).right;
		Token codEdificio = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).value;
		int numIdleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int numIdright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token numId = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
						int Codigo = Integer.valueOf(codigo.getLexema());
						String Periodo =  periodo.getLexema();
						String Dia = dia.getLexema();
						int CodCurso  = Integer.valueOf(codCurso.getLexema());//curso
						int CodSalon = Integer.valueOf(codSalon.getLexema());//salon
						String CodEdificio = codEdificio.getLexema();//Edificio
						int NumId = Integer.valueOf(numId.getLexema());//Catedratico

						Curso curso = listCurso.get(String.valueOf(CodCurso));
						Edificio edificio =  listEdificios.get(CodEdificio);
						Catedratico catedratico =  listCadedraticos.get(String.valueOf(NumId));
						if(curso == null){
							addError(codCurso,"El curso no existe");
						}else if(edificio == null){
							addError(codEdificio,"El edificio no existe");
						}else if(catedratico == null){
							addError(numId,"El catedratico no existe");
						}else{
							Salon salon = (Salon) edificio.getSalones().get(CodSalon);
							 if(salon == null){
								addError(codSalon,"El salon no existe en el edificio");
							}else{
								Horario horario = new Horario(Codigo,Periodo,Dia,curso,salon,edificio,catedratico);
								listHorario.Insert(Codigo,horario);
							}
						}
						;
					
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_horario",30, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-12)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cont_horario ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_horario",30, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asginar ::= ASIGNAR parametros_asginar fin_instrucion 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("asginar",17, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros_asginar ::= apertura_param cont_asignar cerradura_param 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("parametros_asginar",31, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cont_asignar ::= NUMERO COMA numero COMA numero COMA numero 
            {
              Token RESULT =null;
		int carnetleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).left;
		int carnetright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).right;
		Token carnet = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)).value;
		int codHorarioleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).left;
		int codHorarioright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).right;
		Token codHorario = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-4)).value;
		int zonaleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).left;
		int zonaright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).right;
		Token zona = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-2)).value;
		int ex_finalleft = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).left;
		int ex_finalright = ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()).right;
		Token ex_final = (Token)((java_cup.runtime.Symbol) CUP$ParserDatos$stack.peek()).value;
		
							int Carnet = Integer.valueOf(carnet.getLexema());//Estudiante
							int CodHorario = Integer.valueOf(codHorario.getLexema());//Horario
							int Zona = Integer.valueOf(zona.getLexema());
							int Ex_final = Integer.valueOf(ex_final.getLexema());
							Estudiante estud = listEstudiantes.get(Carnet);
							Horario horario = listHorario.get(CodHorario);
							if (estud == null) {
								addError(carnet,"El estudiante no existe");
							}else if(horario == null){
								addError(codHorario,"El Horario no existe");
							}else{
								Asignar asginar =  listAsignacion.get(Carnet,CodHorario);
								if(asginar == null){
									asginar = new Asignar(estud,horario,Zona,Ex_final);
									listAsignacion.push(Carnet,CodHorario,asginar);
								}else{
									addError(carnet,"Ya exite una asginacion en el horario y el estudiante");
								}
							}
						
              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_asignar",32, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.elementAt(CUP$ParserDatos$top-6)), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cont_asignar ::= error 
            {
              Token RESULT =null;

              CUP$ParserDatos$result = parser.getSymbolFactory().newSymbol("cont_asignar",32, ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDatos$stack.peek()), RESULT);
            }
          return CUP$ParserDatos$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserDatos$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserDatos$do_action(
    int                        CUP$ParserDatos$act_num,
    java_cup.runtime.lr_parser CUP$ParserDatos$parser,
    java.util.Stack            CUP$ParserDatos$stack,
    int                        CUP$ParserDatos$top)
    throws java.lang.Exception
    {
              return CUP$ParserDatos$do_action_part00000000(
                               CUP$ParserDatos$act_num,
                               CUP$ParserDatos$parser,
                               CUP$ParserDatos$stack,
                               CUP$ParserDatos$top);
    }
}

}
